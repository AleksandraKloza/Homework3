#Loading "tidyverse" to make R easier
library(tidyverse)
#Set options on scientific notation and the number of digits printed
options(scipen = 5, digits = 3)
#Running the weekly helper to have p_values later in the homework
get_p_value <- function(m) {
p <- summary(m)$coefficients[2,4]
return(p)
}
#Loading "tidyverse" to make R easier
library(tidyverse)
#Set options on scientific notation and the number of digits printed
options(scipen = 5, digits = 3)
#Running the weekly helper to have p_values later in the homework
get_p_value <- function(m) {
p <- summary(m)$coefficients[2,4]
return(p)
}
#Loading "tidyverse" to make R easier
library(tidyverse)
#Set options on scientific notation and the number of digits printed
options(scipen = 5, digits = 3)
#Running the weekly helper to have p_values later in the homework
get_p_value <- function(m) {
p <- summary(m)$coefficients[2,4]
return(p)
}
#Reading the data
read_csv("stroop_standing_data.csv")
view(stroop_standing_data.cvs)
view("stroop_standing_data")
view("stroop_standing_data.cvs")
show("stroop_standing_data.cvs")
#Loading in the Excel data
stroop_data <- read_csv("stroop_standing_data.csv")
view("stroop_standing_data.cvs")
view(stroop_data)
#Filtering the data to get rid of missing values
nrow(stroop_data)
nox11 <- drop_na(stroop_data)
nrow(nox11)
#Filtering the data to get rid of missing values
nrow(stroop_data) #32121
filter(stroop_data, X11 = "NA")
filter(stroop_data, X11 = NA)
nrow(stroop_data)
view(stroop_data)
stroop_data <- select(stroop_data, -X11)
nrow(stroop_data)
view(stroop_data)
view(stroop_data)
#Changing the reaction time to a numeric variable
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
stroop_data <- filter(stroop, rt > 0)
stroop_data <- filter(stroop_data, rt > 0)
#Getting rid of the practice values
stroop_data <- filter(stroop_data, phase != "practice")
#Getting rid of the mistrials
stroop_data <- filter(stroop_data, correct = 999)
#Getting rid of the mistrials
stroop_data <- filter(stroop_data, correct = "999")
#Getting rid of the mistrials
stroop_data <- filter(stroop_data, correct < 2)
#It's a linear model because it's a relationship between "position" (standing or sitting down) and reaction time
stroop_model <- lm(rt~phase, stroop_data)
summary(stroop_model)
#It's a linear model because it's a relationship between "position" (standing or sitting down) and reaction time
stroop_model <- lm(rt~condition, stroop_data)
summary(stroop_model)
#Plotting the model
ggplot(stroop_model, aes(rt, condition))
#Plotting the model
ggplot(stroop_model, aes(x = condition, y = rt))
#Plotting the model
ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point()
source('C:/Users/Ola/Desktop/PS947 Advanced Statistics for Research/Homeworks/HW3/Homework3/nr reg 2003808 homework3.R', echo=TRUE)
#Plotting the model
ggplot(stroop_model, aes(x = rt, y = condition) + geom_point()
#Plotting the model
ggplot(stroop_model, aes(x = rt, y = condition))+ geom_point()
#Plotting the model
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point()
#Plotting the model
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_boxplot()
#Plotting the model
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_contour()
#Plotting the model
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_dotplot()
#Plotting the model
boxplot(condition~rt, stroop_model)
#Plotting the model
ggplot(stroop_model, aes(condition, rt)) + geom_boxplot()
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
view(spotify_data)
?select
??select
view(spotify_data)
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
view(spotify_data)
view(spotify_data)
view()
view(stroop_data)
#Loading "tidyverse" to make R easier
library(tidyverse)
#Set options on scientific notation and the number of digits printed
options(scipen = 5, digits = 3)
get_p_value <- function(m) {
p <- summary(m)$coefficients[2,4]
return(p)
}
stroop_data <- read_csv("stroop_standing_data.csv")
view(stroop_data)
stroop_data <- select(stroop_data, -X11)
view(stroop_data)
#Changing the reaction time to a numeric variable
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
#Getting rid of false values by making sure all of them are positive
stroop_data <- filter(stroop_data, rt > 0)
#Getting rid of the practice values
stroop_data <- filter(stroop_data, phase != "practice")
#Getting rid of the mistrials by leaving just the ones coded as correct (1) and incorrect (0)
stroop_data <- filter(stroop_data, correct < 2)
#It's a linear model because it's a relationship between "position" (standing or sitting down) and reaction time
stroop_model <- lm(rt~condition, stroop_data)
summary(stroop_model)
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
view()
view(spotify_data)
#Plotting the model
ggplot(stroop_model, aes(condition, rt)) + geom_boxplot()
#Plotting the model
ggplot(stroop_model, aes(condition, rt)) + geom_point()
#Plotting the model
ggplot(stroop_model, aes(rt, condition)) + geom_point()
#Plotting the model
plot(stroop_model, aes(rt, condition), pch = 16, cex = 1.3, col = "blue", main = "reaction time plotted against condition", xlab = "reaction time", ylab = "condition")
#Plotting the model
ggplot(stroop_model, aes(rt, condition), pch = 16, cex = 1.3) + geom_point()
#Plotting the model
ggplot(stroop_model, aes(rt, condition)) + geom_point()
#Plotting the model
plot(rt~condition, data = stroop_model)
plot(rt~condition, data = stroop_model)
abline(stroop_model)
ggplot2(rt~condition, data = stroop_model)
abline(stroop_model)
#Plotting the model
ggplot(stroop_model, rt~condition)
ggplot(formula = "lm", data = stroop_model, rt~condition)
ggplot(stroop_model, aes(x = rt, y = condition)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
summary(stroop_model)
ggplot(stroop_model, aes(x = congruency, y = condition)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
stroop_model <- lm(congruency~condition, stroop_data)
summary(stroop_model)
ggplot(stroop_model, aes(x = congruency, y = condition)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
stroop_model <- lm(rt~condition, stroop_data)
summary(stroop_model)
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
#Plotting the model
ggplot(stroop_model, aes(x = rt, y = condition)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(stroop_model, aes(x = rt, y = condition)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_text(aes(label = value), size = 4, vjust = -1) + ylab("Reaction time") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_text(aes(label = number), size = 4, vjust = -1) + ylab("Reaction time") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
geom_text(aes(label = intercept), size = 4, vjust = -1) + ylab("Reaction time") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
#Selecting only the data relevant for replication
spotify_data <- select(spotify_data, tempo, energy, danceability, loudness, valence, acousticness)
#Running a PCA
pca <- prcomp(spotify_data)
summary(pca)
fviz_pca_var(pca)
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loundness = scale(loundness),
valence = scale(valence),
acousticness = scale(acousticness)
)
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loudness = scale(loudness),
valence = scale(valence),
acousticness = scale(acousticness)
)
pca_s <- prcomp(spotify_data_s)
summary(pca_s)
autoplot(pca_s)
#Plotting
pca_plot <- prcomp(spotify_data, scale = TRUE)
autoplot(pca_plot)
#Plotting
ggbiplot(pca_s)
#Plotting (installing the package first)
library(devtools)
#Plotting (installing the package first)
plot(pca_s, type = "1")
#Plotting (installing the package first)
plot(pca_s, type = "1") + geom_line
#Plotting (installing the package first)
plot(pca_s, type = "1") + geom_lines
library(devtools)
install_github("ggbiplot", "vqv")
#Plotting (installing the package first)
library(devtools)
library(devtools)
install_github("vqv/ggbiplot")
library("factoextra")
fviz_pca_ind(pca_s, geom.ind = "point", pointshape = 21,
pointsize = 2,
fill.ind = wdbc$diagnosis,
col.ind = "black",
palette = "jco",
addEllipses = TRUE,
label = "var",
col.var = "black",
repel = TRUE)
#Installing a package + plotting
plot(pca_s, type = "lines")
#Plotting
plot(pca_s, type = "lines") +
geom_tile("PCA") + ylab("Variance") + xlab("Variable")
plot(pca_s, type = "lines") +
labs(title="PCA", y = "Variance", x = "Variable")
#Plotting
plot(pca_s, type = "lines") +
labs(title="PCA", y = "Variance", x = "Variable") +
geom_text(aes(label = ), size = 4, vjust = -1) + ylab("Variance") + xlab("Variable")
plot(pca_s, type = "lines")
plot(pca_s, type = "lines") +
labs(title = "PCA", y = "Variance", x = "Variable")
#Plotting
biplot(pca_s, type = "lines")
#Plotting
biplot(pca_s)
library(rgl)
#Plotting
plot(pca_s, type = "lines")
plot(pca_s, type = "lines") +
labs(title="Area vs Population", y = "Population", x = "Area")
#Plotting
plot(pca_s, type = "lines", title="Area vs Population", y = "Population", x = "Area")
#Plotting
plot(pca_s, type = "lines", title="Area vs Population", ylabel = "Population", xlabel = "Area")
#Plotting
plot(pca_s, type = "lines", title="Area vs Population", y_label = "Population", x_label = "Area")
?plot
#Plotting
plot(pca_s, type = "lines")
#Plotting
screeplot(pca_s, type = "lines")
#Plotting
screeplot(pca_s, type = "lines")
fviz_pca_var(pca_s)
install.packages("factoextra")
install.packages("factoextra")
fviz_pca_var(pca_s)
install.packages("devtools")
fviz_pca_var(pca_s)
install_github("vqv/ggbiplot")
library(ggbiplot)
install.packages("factoextra")
library("factoextra")
fviz_pca_var(pca_s)
summary(pca_s)
view(spotify_data)
#Loading "tidyverse" to make R easier
library(tidyverse)
#Set options on scientific notation and the number of digits printed
options(scipen = 5, digits = 3)
stroop_data <- read_csv("stroop_standing_data.csv")
view(stroop_data)
stroop_data <- select(stroop_data, -X11)
view(stroop_data)
#Changing the reaction time to a numeric variable
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
#Getting rid of false values by making sure all of them are positive
stroop_data <- filter(stroop_data, rt > 0)
#Getting rid of the practice values
stroop_data <- filter(stroop_data, phase != "practice")
#Getting rid of the mistrials by leaving just the ones coded as correct (1) and incorrect (0)
stroop_data <- filter(stroop_data, correct < 2)
stroop_model <- lm(rt~condition, stroop_data)
summary(stroop_model)
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
spotify_data <- read.csv("spotify_cleaned.csv")
view(spotify_data)
#Removing irrelevant data
spotify_data <- select(spotify_data, -"track name", -artist, -streams)
#Removing irrelevant data
spotify_data <- select(spotify_data, -track.name, -artist, -streams)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams)
pca <- prcomp(spotify_data)
summary(pca) #We can see that around 99.9% of the variance is explained by the first two variables, which are tempo and energy (tempo - 99.5%, energy - .47%)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.name, -Artist, -Streams -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams, -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams, -X, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, - Track.Name, - Artist, - Streams, - X, - time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, - Artist, - Streams, - X, - time_signature, - Track.Name)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Artist, -Streams, -X, -time_signature, -Track.Name)
#Removing irrelevant data
spotify_data <- select(spotify_data, -"X", -"Track.Name", -"Artist", -"Streams", -"time.signature")
#Removing irrelevant data
spotify_data <- select(spotify_data, -"X1", -"Track Name", -"Artist", -"Streams", -"time_signature")
#Removing irrelevant data
spotify_data <- select(spotify_data, -"X", -"Track Name", -"Artist", -"Streams", -"time_signature")
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time.signature)
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time.signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
#Running a PCA
pca <- prcomp(spotify_data)
summary(pca) #We can see that around 99.9% of the variance is explained by the first two variables, which are tempo and energy (tempo - 99.5%, energy - .47%)
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loudness = scale(loudness),
valence = scale(valence),
acousticness = scale(acousticness)
)
pca_s <- prcomp(spotify_data_s)
summary(pca_s)
screeplot(pca_s, type = "lines")
install.packages("factoextra")
library("factoextra")
fviz_pca_var(pca_s)
install.packages("factoextra")
#Installing packages and plotting the results
screeplot(pca, type = "lines")
fviz_pca_var(pca)
#Installing packages and plotting the results
screeplot(pca_s, type = "lines")
fviz_pca_var(pca_s)
#Installing packages and plotting the results
screeplot(pca, type = "lines")
install.packages("factoextra")
library("factoextra")
fviz_pca_var(pca)
knitr::opts_chunk$set(echo = TRUE)
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
library(tidyverse)
options(scipen = 5, digits = 3)
stroop_data <- read_csv("stroop_standing_data.csv")
view(stroop_data)
#### Filtering the data to get rid of missing values
stroop_data <- select(stroop_data, -X11)
#### Changing the reaction time to a numeric variable
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
#### Getting rid of false values by making sure all of them are positive
stroop_data <- filter(stroop_data, rt > 0)
#### Getting rid of the practice values
stroop_data <- filter(stroop_data, phase != "practice")
#### Getting rid of the mistrials by leaving just the ones coded as correct (1) and incorrect (0)
stroop_data <- filter(stroop_data, correct < 2)
stroop_model <- lm(rt~condition, stroop_data)
summary(stroop_model)
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
```{r} ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
```
```{r setup, include=FALSE}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r} stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point() + stat_smooth(method = "lm", col = "red") + ylab("Reaction time intercept") + xlab("Condition") ```
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point() + stat_smooth(method = "lm", col = "red") + ylab("Reaction time intercept") + xlab("Condition")
```{r} library(tidyverse) ```
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point() + stat_smooth(method = "lm", col = "red") + ylab("Reaction time intercept") + xlab("Condition")
library(tidyverse)
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point() + stat_smooth(method = "lm", col = "red") + ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
#Loading "tidyverse" to make R easier
library(tidyverse)
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
myplot <- ggplot(
stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
myplot <- ggplot(
stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
myplot <- ggplot(stroop_model, aes(condition~rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(condition~rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
#Plotting the model
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
