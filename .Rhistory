spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams)
pca <- prcomp(spotify_data)
summary(pca) #We can see that around 99.9% of the variance is explained by the first two variables, which are tempo and energy (tempo - 99.5%, energy - .47%)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.name, -Artist, -Streams -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams, -X1, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Track.Name, -Artist, -Streams, -X, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, - Track.Name, - Artist, - Streams, - X, - time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, - Artist, - Streams, - X, - time_signature, - Track.Name)
#Removing irrelevant data
spotify_data <- select(spotify_data, -Artist, -Streams, -X, -time_signature, -Track.Name)
#Removing irrelevant data
spotify_data <- select(spotify_data, -"X", -"Track.Name", -"Artist", -"Streams", -"time.signature")
#Removing irrelevant data
spotify_data <- select(spotify_data, -"X1", -"Track Name", -"Artist", -"Streams", -"time_signature")
#Removing irrelevant data
spotify_data <- select(spotify_data, -"X", -"Track Name", -"Artist", -"Streams", -"time_signature")
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time.signature)
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time.signature)
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
#Running a PCA
pca <- prcomp(spotify_data)
summary(pca) #We can see that around 99.9% of the variance is explained by the first two variables, which are tempo and energy (tempo - 99.5%, energy - .47%)
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loudness = scale(loudness),
valence = scale(valence),
acousticness = scale(acousticness)
)
pca_s <- prcomp(spotify_data_s)
summary(pca_s)
screeplot(pca_s, type = "lines")
install.packages("factoextra")
library("factoextra")
fviz_pca_var(pca_s)
install.packages("factoextra")
#Installing packages and plotting the results
screeplot(pca, type = "lines")
fviz_pca_var(pca)
#Installing packages and plotting the results
screeplot(pca_s, type = "lines")
fviz_pca_var(pca_s)
#Installing packages and plotting the results
screeplot(pca, type = "lines")
install.packages("factoextra")
library("factoextra")
fviz_pca_var(pca)
knitr::opts_chunk$set(echo = TRUE)
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
library(tidyverse)
options(scipen = 5, digits = 3)
stroop_data <- read_csv("stroop_standing_data.csv")
view(stroop_data)
#### Filtering the data to get rid of missing values
stroop_data <- select(stroop_data, -X11)
#### Changing the reaction time to a numeric variable
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
#### Getting rid of false values by making sure all of them are positive
stroop_data <- filter(stroop_data, rt > 0)
#### Getting rid of the practice values
stroop_data <- filter(stroop_data, phase != "practice")
#### Getting rid of the mistrials by leaving just the ones coded as correct (1) and incorrect (0)
stroop_data <- filter(stroop_data, correct < 2)
stroop_model <- lm(rt~condition, stroop_data)
summary(stroop_model)
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
```{r} ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
```
```{r setup, include=FALSE}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r} stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point() + stat_smooth(method = "lm", col = "red") + ylab("Reaction time intercept") + xlab("Condition") ```
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point() + stat_smooth(method = "lm", col = "red") + ylab("Reaction time intercept") + xlab("Condition")
```{r} library(tidyverse) ```
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point() + stat_smooth(method = "lm", col = "red") + ylab("Reaction time intercept") + xlab("Condition")
library(tidyverse)
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) + geom_point() + stat_smooth(method = "lm", col = "red") + ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
#Loading "tidyverse" to make R easier
library(tidyverse)
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
myplot <- ggplot(
stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
myplot <- ggplot(
stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
myplot <- ggplot(stroop_model, aes(condition~rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(condition~rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
#Plotting the model
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
stroopplot <- ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
#Loading "tidyverse" to make R easier
library(tidyverse)
ggplot(stroop_model, aes(x = condition, y = rt)) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
ylab("Reaction time intercept") + xlab("Condition")
knitr::opts_chunk$set(echo = TRUE)
screeplot(pca, type = "lines")
install.packages("factoextra", repos = "http://cran.us.r-project.org")
library("factoextra")
fviz_pca_var(pca)
#### Installing packages and plotting the results
screeplot(pca_s, type = "lines")
install.packages("factoextra")
library("factoextra")
fviz_pca_var(pca_s)
knitr::opts_chunk$set(echo = TRUE)
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loudness = scale(loudness),
valence = scale(valence),
acousticness = scale(acousticness),
key = scale(key),
mode = scale(mode),
speechiness = scale(speechiness),
instrumentalness = scale(instrumentalness),
liveness = scale(liveness),
duration_sec = scale(duration_sec)
)
library(tidyverse)
options(scipen = 5, digits = 3)
stroop_data <- read_csv("stroop_standing_data.csv")
view(stroop_data)
stroop_data <- select(stroop_data, -X11)
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
stroop_data <- filter(stroop_data, rt > 0)
stroop_data <- filter(stroop_data, phase != "practice")
stroop_data <- filter(stroop_data, correct < 2)
stroop_model_phase <- lm(rt~phase+congruency, stroop_data)
summary(stroop_model_phase)
spotify_data <- read.csv("spotify_cleaned.csv")
view(spotify_data)
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
pca <- prcomp(spotify_data)
summary(pca)
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loudness = scale(loudness),
valence = scale(valence),
acousticness = scale(acousticness),
key = scale(key),
mode = scale(mode),
speechiness = scale(speechiness),
instrumentalness = scale(instrumentalness),
liveness = scale(liveness),
duration_sec = scale(duration_sec)
)
pca_s <- prcomp(spotify_data_s)
summary(pca_s)
screeplot(pca_s, type = "lines")
install.packages("factoextra")
library("factoextra")
fviz_pca_var(pca_s)
install.packages("factoextra")
#Loading "tidyverse" to make R easier
library(tidyverse)
#Set options on scientific notation and the number of digits printed
options(scipen = 5, digits = 3)
#Question 2
#Loading in the Excel data
stroop_data <- read_csv("stroop_standing_data.csv")
view(stroop_data)
#Filtering the data to get rid of missing values
stroop_data <- select(stroop_data, -X11)
view(stroop_data)
#Changing the reaction time to a numeric variable
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
#Getting rid of false values by making sure all of them are positive
stroop_data <- filter(stroop_data, rt > 0)
#Getting rid of the practice values
stroop_data <- filter(stroop_data, phase != "practice")
#Getting rid of the mistrials by leaving just the ones coded as correct (1) and incorrect (0)
stroop_data <- filter(stroop_data, correct < 2)
#To test the hypothesis I will fit a linear model
#The measured relationship is between reaction time in different phases (standing vs sitting) in congruent and incongruent trials.
stroop_model <- lm(rt~phase+congruency, stroop_data)
summary(stroop_model)
#Only the sitting down block is significantly related to the reaction time. Standing phase is not significant.As in the previous model, only the reaction times during incongruent trials are impacted.
#Plotting the model
#RESULTS:
# - In the original study, participants showed a smaller Stroop effect when they started the task standing than when sitting
# - Results from this replication showed that reaction time was significantly impacted only during incongruent trials. Sitting down was the only significant phase. It suggests that standing up is not a factor that impacts reaction time at all, and sitting down impacts the reaction time only in incongruent trials.
# If reaction time increases while sitting down in incongruent trials, the results mean that the Stroop effect will be smaller if participants standing.
# In conclusion, the replication study confirmed the original study's results as the Stroop effect is smaller in the standing phase than the sitting down phase.
#Question 3
#Loading in the Excel data
spotify_data <- read.csv("spotify_cleaned.csv")
view(spotify_data)
#Removing irrelevant data
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
#Running a PCA
pca <- prcomp(spotify_data)
summary(pca)
# We can see that around 99% of the variance is explained by the first two principal components
# PCA needs to be performed on a symmetric correlation or covariance matrix, so an improvement could be scaling the columns
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loudness = scale(loudness),
valence = scale(valence),
acousticness = scale(acousticness),
key = scale(key),
mode = scale(mode),
speechiness = scale(speechiness),
instrumentalness = scale(instrumentalness),
liveness = scale(liveness),
duration_sec = scale(duration_sec)
)
pca_s <- prcomp(spotify_data_s)
summary(pca_s)
#After centering the variables the variance changed - it is more spread out now
#Installing packages and plotting the results
screeplot(pca_s, type = "lines")
install.packages("factoextra")
library("factoextra")
fviz_pca_var(pca_s)
#The graph shows that acousticness is a factor related to popularity in the strongest positive way.
knitr::opts_chunk$set(echo = TRUE)
screeplot(pca_s, type = "lines")
install.packages("factoextra")
install.packages("factoextra")
library("factoextra")
library("factoextra")
fviz_pca_var(pca_s)
knitr::opts_chunk$set(echo = TRUE)
plot(pca_s, type = "lines")
fviz_pca_var(pca_s)
install.packages("factoextra")
install.packages("factoextra")
knitr::opts_chunk$set(echo = TRUE)
library("factoextra")
screeplot(pca_s, type = "lines")
fviz_pca_var(pca_s)
library(tidyverse)
spotify_data <- read.csv("spotify_cleaned.csv")
view(spotify_data)
spotify_data <- select(spotify_data, -X, -Track.Name, -Artist, -Streams, -time_signature)
pca <- prcomp(spotify_data)
summary(pca)
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loudness = scale(loudness),
valence = scale(valence),
acousticness = scale(acousticness),
key = scale(key),
mode = scale(mode),
speechiness = scale(speechiness),
instrumentalness = scale(instrumentalness),
liveness = scale(liveness),
duration_sec = scale(duration_sec)
)
pca_s <- prcomp(spotify_data_s)
summary(pca_s)
install.packages("factoextra")
library("factoextra")
screeplot(pca_s, type = "lines")
fviz_pca_var(pca_s)
install.packages("factoextra")
knitr::opts_chunk$set(echo = TRUE)
library("factoextra")
screeplot(pca_s, type = "lines")
fviz_pca_var(pca_s)
plot(stroop_model_phase)
plot(rt~phase+congruency, data = stroop_data)
plot(rt~phase+congruency, data = stroop_data)
ggplot(stroop_data, aes(rt~phase+congruency)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(stroop_data) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(stroop_model_phase, aes(rt~phase+congruency)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(stroop_model_phase, aes(rt~phase+congruency)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
ggplot(stroop_model_phase, aes(rt~phase)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
plot(stroop_model_phase)
ggplot(stroop_model_phase, aes(x = phase, y = rt)) + geom_point()
plot(effect(term = "phase:congruency", mod = stroop_model_phase), main = "RT in different phases in congruent and incongruent trials", xlab = "Phase", ylab = "RT")
library(tidyverse)
plot(effect(term = "phase:congruency", mod = stroop_model_phase), main = "RT in different phases in congruent and incongruent trials", xlab = "Phase", ylab = "RT")
plot(effect(term = "phase:congruency", mod = stroop_model_phase), main = "RT in different phases in congruent and incongruent trials", xlab = "Phase", ylab = "RT")
library(effects)
install.packages(effects)
install.packages("effects")
library("effects")
library("effect")
install.packages("effects")
library("effects")
library("effects")
install.packages("effect")
library("effect")
install.packages("effects")
library("effects")
library(effects)
knitr::opts_chunk$set(echo = TRUE)
library(effects)
stargazer(stroop_model_phase, type = "text")
plot(effects(term = "phase:congruency", mod = stroop_model_phase))
plot(effects(term = "rt:phase", mod = stroop_model_phase))
plot(effects(term = "rt:phase+congruency", mod = stroop_model_phase))
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
library(tidyverse)
options(scipen = 5, digits = 3)
view(stroop_data)
stroop_data <- select(stroop_data, -X11)
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
stroop_data <- filter(stroop_data, rt > 0)
stroop_data <- filter(stroop_data, phase != "practice")
stroop_data <- filter(stroop_data, correct < 2)
stroop_model_phase <- lm(rt~phase+congruency, stroop_data)
plot(effects(term = "rt:phase+congruency", mod = stroop_model_phase))
plot(effects(term = "rt:phase", mod = stroop_model_phase))
stroop_data <- mutate(stroop_data, phase = as.numeric(phase))
plot(effects(term = "rt:phase", mod = stroop_model_phase))
plot(effects(term = "congruency", mod = stroop_model_phase))
plot(effects(term = "phase:congruency", mod = stroop_model_phase))
stroop_model_phase <- mutate(data = stroop_model_phase, phase = as.numeric(phase))
stroop_model_phase <- lm(rt~phase+congruency + phase:congruency, stroop_data)
stroop_model_phase <- lm(rt ~ phase + congruency + phase:congruency, stroop_data)
summary(stroop_model_phase)
view(stroop_data)
#To test the hypothesis I will fit a linear model
#The measured relationship is between reaction time in different phases (standing vs sitting) in congruent and incongruent trials.
stroop_model_phase <- lm(rt ~ phase + congruency + phase:congruency, stroop_data)
stroop_model_phase <- lm(rt ~ phase + congruency + phase:congruency, data = stroop_data)
#To test the hypothesis I will fit a linear model
#The measured relationship is between reaction time in different phases (standing vs sitting) in congruent and incongruent trials.
stroop_model_phase <- lm(rt ~ phase + congruency + phase:congruency, data = stroop_data)
fviz_pca_var(pca_s)
spotify_data_s <- mutate(spotify_data,
tempo = scale(tempo),
energy = scale(energy),
danceability = scale(danceability),
loudness = scale(loudness),
valence = scale(valence),
acousticness = scale(acousticness),
key = scale(key),
mode = scale(mode),
speechiness = scale(speechiness),
instrumentalness = scale(instrumentalness),
liveness = scale(liveness),
duration_sec = scale(duration_sec)
)
pca_s <- prcomp(spotify_data_s)
summary(pca_s)
library("factoextra")
screeplot(pca_s, type = "lines")
fviz_pca_var(pca_s)
stroop_data <- filter(stroop_data, -trial)
stroop_data <- filter(stroop_data, -stimulus)
stroop_data <- select(stroop_data, -trial)
stroop_data <- select(stroop_data, -stimulus)
stroop_model_phase <- lm(rt ~ phase + congruency, data = stroop_data)
stroop_model_phase <- lm(rt ~ phase + congruency, stroop_data)
stroop_model_phase <- lm(rt ~ phase + congruency, stroop_data)
stroop_model_phase <- lm(rt ~ phase + congruency, stroop_data)
stroop_model_phase <- lm(rt ~ phase + congruency, stroop_data)
#To test the hypothesis I will fit a linear model
#The measured relationship is between reaction time in different phases (standing vs sitting) in congruent and incongruent trials.
stroop_model_phase <- lm(rt ~ phase + congruency, stroop_data)
#Loading "tidyverse" to make R easier
library(tidyverse)
#Set options on scientific notation and the number of digits printed
options(scipen = 5, digits = 3)
stroop_data <- read_csv("stroop_standing_data.csv")
view(stroop_data)
#Loading in the Excel data
stroop_data <- read_csv("stroop_standing_data.csv")
view(stroop_data)
#Filtering the data to get rid of missing values
stroop_data <- select(stroop_data, -X11)
view(stroop_data)
#Changing the reaction time to a numeric variable
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
#Getting rid of false values by making sure all of them are positive
stroop_data <- filter(stroop_data, rt > 0)
#Getting rid of the practice values
stroop_data <- filter(stroop_data, phase != "practice")
#Getting rid of the mistrials by leaving just the ones coded as correct (1) and incorrect (0)
stroop_data <- filter(stroop_data, correct < 2)
#Removing trial and stimulus for future plots
stroop_data <- select(stroop_data, -trial)
stroop_data <- select(stroop_data, -stimulus)
#To test the hypothesis I will fit a linear model
#The measured relationship is between reaction time in different phases (standing vs sitting) in congruent and incongruent trials.
stroop_model_phase <- lm(rt ~ phase + congruency, stroop_data)
summary(stroop_model)
stroop_data %>%
unite("phase_congruency", phase:congruency, na.rm = TRUE, remove = FALSE) %>%
glimpse() -> phase_congruency
#Loading "tidyverse" to make R easier
library(tidyverse)
#Set options on scientific notation and the number of digits printed
options(scipen = 5, digits = 3)
#To test the hypothesis I will fit a linear model
#The measured relationship is between reaction time in different phases (standing vs sitting) in congruent and incongruent trials.
stroop_model_phase <- lm(rt ~ phase + congruency, stroop_data)
summary(stroop_model_phase)
stroop_data <- mutate(stroop_data, rt = as.numeric(rt))
stroop_model_phase <- lm(rt ~ phase + congruency, stroop_data)
summary(stroop_model_phase)
stroop_data %>%
unite("phaseandcongruency", phase:congruency, na.rm = TRUE, remove = FALSE) %>%
glimpse() -> stroop_data
ggplot(data = stroop_data, aes(phaseandcongruency)) + geom_boxplot(aes(phaseandcongruency, rt))
stroop_data %>%
unite("phaseandcongruency", phase:congruency, na.rm = TRUE, remove = FALSE) %>%
glimpse() -> phasecongruency
ggplot(data = phasecongruency, aes(phaseandcongruency)) + geom_boxplot(aes(phaseandcongruency, rt))
stroop_data %>%
unite("phaseandcongruency", phase:congruency, na.rm = TRUE, remove = FALSE) %>%
glimpse() -> phasecongruency
ggplot(data = phasecongruency, aes(phaseandcongruency)) + geom_boxplot(aes(phaseandcongruency, rt))
